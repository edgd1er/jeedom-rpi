ARG DISTRO=buster-slim
FROM debian:${DISTRO} as base

ENV SHELL_ROOT_PASSWORD password
ENV APACHE_HTTP_PORT 80
ENV APACHE_HTTPS_PORT 443
ENV SSH_PORT 22
ENV MODE_HOST 0
ENV MYSQL_ROOT_PASSWD password
ENV MYSQL_JEEDOM_HOST localhost
ENV MYSQL_JEEDOM_PASSWD jeedom
ENV MYSQL_JEEDOM_DBNAME jeedom
ENV MYSQL_JEEDOM_USERNAME jeedom
ENV MYSQL_JEEDOM_PORT 3306
ENV XDEBUG 0
ENV XDEBUG_HOST localhost
ENV XEBUG_PORT 9003
ARG aptCacher


EXPOSE 80
EXPOSE 443

LABEL maintainer=edgd1er@hotmail.com

#add apt-cacher setting if present:
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
#hadolint ignore=DL3008
RUN if [[ -n ${aptCacher:-} ]]; then printf "Acquire::http::Proxy \"http://%s:3142\";" "${aptCacher}">/etc/apt/apt.conf.d/01proxy \
    && printf "Acquire::https::Proxy \"http://%s:3142\";" "${aptCacher}">>/etc/apt/apt.conf.d/01proxy ; fi  \
    #&& echo "Dir::Cache \"\";\nDir::Cache::archives \"\";" | tee /etc/apt/apt.conf.d/02nocache && \
    && printf "#/etc/dpkg/dpkg.cfg.d/01_nodoc\n\n# Delete locales\npath-exclude=/usr/share/locale/*\n\n# Delete man pages\npath-exclude=/usr/share/man/*\n\n# Delete docs\npath-exclude=/usr/share/doc/*\npath-include=/usr/share/doc/*/copyright" | tee /etc/dpkg/dpkg.cfg.d/03nodoc \
    #Massive apt install of jeedom requirements to optimise downloads
    && apt-get update && apt-get install -y --no-install-recommends wget rsync automake lsof iproute2 \
	build-essential curl apt-transport-https software-properties-common net-tools gettext snmp \
    && add-apt-repository non-free  && apt-get update && apt-get install -y --no-install-recommends supervisor \
	python3 python3-pip python3-setuptools python-setuptools nmap xvfb iputils-ping libcurl3-gnutls librsync-dev \
    passwd usbutils usb.ids ntp ca-certificates unzip sudo cron locate tar telnet wget logrotate fail2ban dos2unix \
    ntpdate htop iotop vim iftop smbclient git libexpat1 ssl-cert ffmpeg usbutils snmp-mibs-downloader\
    cutycapt at libsox-fmt-mp3 sox libttspico-utils mariadb-client mariadb-common \
    #mbrola removed (not available for armhf )
    #add server apache
    apache2 apache2-utils \
    #cannot install php as php5 or 7 might be option. leave install.sh install needed php package
    #get from jeedom s stable install files
    && apt-get -y remove -y brltty  && apt-get upgrade -y \
    && apt-get autoremove -y --purge && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /var/run/sshd -p /var/log/supervisor

FROM base

#Performs versions specific actions

ARG VERSION
ENV VERSION=${VERSION}
ARG JDM_VERSION=latest
ARG aptCacher

RUN echo "install jeedom VERSION: $VERSION / ${JDM_VERSION}" \
    && wget -qO /root/.bashrc https://raw.githubusercontent.com/jeedom/core/$VERSION/install/bashrc \
    && wget -qO /etc/motd https://raw.githubusercontent.com/jeedom/core/$VERSION/install/motd \
    && apt-get autoremove -y --purge && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* \
    ## latest version
    && wget -qO /root/install_docker.sh https://raw.githubusercontent.com/jeedom/core/${VERSION}/install/install.sh \
    # tagged version
    && if [[ "latest" != "${JDM_VERSION}" ]] && [[ "${VERSION}" == "V4-stable" ]]; then \
    sed -i "s#https://github.com/jeedom/core/archive/\${VERSION}.zip#https://github.com/jeedom/core/archive/refs/tags/\${JDM_VERSION}.zip#" /root/install_docker.sh ; fi \
    && chmod +x /root/install_docker.sh \
    #&& echo "url install: $(grep -oP '(?<=  wget )(--no-check-certificate |)([^ ]+)' /root/install_docker.sh | grep -oP 'https.+')" || true \
    ##########################################
    # Adapt install_docker to docker
    # fix jeedom install.sh for unattended install
    # fix jeedom-core, allowing to define mysql not being local
    # apt-get for unattended install
    && sed -i "s#MYSQL_JEEDOM_PASSWD=.*#MYSQL_JEEDOM_PASSWD=\$\(tr -cd \'a-f0-9\' \< /dev/urandom \| head -c 15\)#" /root/install_docker.sh \
    && sed -i "s/systemctl daemon-reload/:/" /root/install_docker.sh \
    && sed -i "s#rm /var/lib/mysql/ib_logfile\*#:#" /root/install_docker.sh \
    && sed -i -E "s#mysql -uroot($| )#mysql -uroot -p\${MYSQL_ROOT_PASSWD} -h \${MYSQL_JEEDOM_HOST} -P\${MYSQL_JEEDOM_PORT} \${MYSQL_JEEDOM_DBNAME} #g" /root/install_docker.sh \
    && grep "^MYSQL_JEEDOM_PASSWD=" /root/install_docker.sh || true \
    && grep "mysql -uroot" /root/install_docker.sh || true \
    && sed -i 's#-y install "#-y --no-install-recommends install "#' /root/install_docker.sh \
    && sed -i "s#apt install#apt-get install -y --no-install-recommends#" /root/install_docker.sh \
    # cut mysql/mariadb server configuration
    #V4
    && sed -i 's/mariadb-server//' /root/install_docker.sh \
    && sed -i 's/service_action stop mysql/return 0/' /root/install_docker.sh \
    && sed -i 's/service_action status mariadb/true/g' /root/install_docker.sh \
    && sed -i 's/service_action status mysql/true/g' /root/install_docker.sh \
    && sed -i 's/service_action restart apache2/\:/' /root/install_docker.sh \
    #V3
    && sed -i 's/systemctl restart apache2/\:/' /root/install_docker.sh \
    && sed -i 's/systemctl stop mysql/return 0/' /root/install_docker.sh \
    # set jeedom version v3 or v4
    && sed -i "s/VERSION=V4-stable/VERSION=\${VERSION}/g" /root/install_docker.sh \
    ##########################################
    && echo "root:${SHELL_ROOT_PASSWORD}" | chpasswd \
    && echo "Installing jeedom version: ${VERSION} / ${JDM_VERSION}" \
    # step 2 install mainpackage
    && /root/install_docker.sh -s 2 -v ${VERSION}\
    # step 3 install mysql server
    && echo "Etape 3: non faite: installation en local de la BDD" \
    # install apache
    && /root/install_docker.sh -s 4 -v ${VERSION} \
    # s5 install php
    && /root/install_docker.sh -s 5 -v ${VERSION} \
    # s6 install jeedom download
    && /root/install_docker.sh -s 6 -v ${VERSION} \
	#Step 7 = apache SSL + php conf + mysql server conf
    && /root/install_docker.sh -s 7 -v ${VERSION} \
    # Next steps are executed in init.
    #V3 S8 =  db param done at runtime. / V4: later in build\
    && find /var/www/html/ -type d -exec chmod 755 {} \; \
    && find /var/www/html/ -type f -exec chmod 744 {} \; \
    && chown -R www-data:www-data /var/www/html/ \
    #v3 S9 =  install.php done at runtime. / V4: drop database , DB creds done at runtime \
    #v3 s10 = post install (cron ) / v4: install.php done at runtime.
    #v4 s11 = none / v4: post install (cron )
    && if [ $VERSION = "release" ]; then /root/install_docker.sh -s 10 -v ${VERSION} \
    else /root/install_docker.sh -s 8 -v ${VERSION};/root/install_docker.sh -s 11 -v ${VERSION}; fi \
    && update-ca-certificates --fresh \
    && apt-get remove -y x11-common \
    # untouched data dir
    && cp -Rp /var/www/html/data/ /var/www/html/.data/ \
    # clean caches
    && apt-get autoremove -y --purge && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/*

COPY init.sh /root/init.sh
COPY supervisor/ /etc/supervisor/
COPY supervisorlog /etc/logrotate.d/supervisor
COPY jeedom_plugin /etc/logrotate.d/jeedom_plugin
RUN chmod +x /root/init.sh && mkdir -p /var/log/supervisor/  && \
#VOLUME ["/tmp", "/var/log","/var/www/html/log/"]
 if [[ -n $aptCacher ]]; then echo "" > /etc/apt/apt.conf.d/01proxy; fi

HEALTHCHECK --interval=60s --timeout=3s --retries=3 --start-period=40s \
 CMD curl -s --fail http://localhost/here.html || exit 1
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]

VOLUME /var/www/html/data
VOLUME /var/www/html/backup
VOLUME /var/www/html/tmp
VOLUME /var/www/html/log/


